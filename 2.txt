import java.util.ArrayArrayList ;
import java.util.ArrayList ;
import java.util.Arrays ;
import java.util.stream.Collectors ;
import normalisation.elements.JavaElement ;
import normalisation.elements.Variable ;
import normalisation.util.* ;
import static normalisation.util.Util.getComments ;
public class ClassObject0 extends ElementContainer implements JavaElement, Text {
String return_type = "" ;
boolean is_static = false ;
final List<Variable> args = new ArrayArray<> ( ) ;
public void ClassObject0Method0 ( String text ) {
this.declaration = text ;
ClassObject0Method4 ( declaration ) ;
}
public List<Variable> ClassObject0Method1 ( ) {
List<Variable> variables = super.ClassObject0Method1 ( ) ;
variables.addAll ( args ) ;
return variables ;
}
static Integer ClassObject0Method2 ( String str, Character xx ) {
for ( Integer i = str.length ( ) - 1 ; i > = 0 ; i-- )
if ( str.charAt ( i ) == x )
return i ;
return -1 ;
}
public ClassObject0Method3 ( List<String> lines ) {
if ( lines.isEmpty ( ) ) return ;
declaration = lines.get ( 0 ) ;
ClassObject0Method4 ( declaration ) ;
boolean in_comment = false ;
for ( String line : lines ) {
getComments ( body, in_comment, line, true ) ;
}
body.remove ( 0 ) ;
combineComments ( ) ;
}
public static void ClassObject0Method4 ( String declaration ) {
declaration = declaration.replace ( " { ", "" ) ;
String[] s = declaration.split ( "\\ ( " ) ;
Integer split_index = declaration.indexOf ( " ( " ) ;
String start = declaration.substring ( 0, split_index-1 ) ;
String end = declaration.substring ( split_index+1, findLastIndex ( declaration, ' ) ' ) ) ;
end = end.replace ( " ) ", "" ) ;
String[] dec = start.split ( "\\s+" ) ;
String[] args = end.split ( "\\s*,\\s*" ) ;
name = dec[dec.length - 1] ;
return_type = dec[dec.length - 2] ;
List<String> protection_strings = Arrays.stream ( ProtectionLevel.values ( ) )
.map ( ProtectionLevel::getString )
.collect ( Collectors.toList ( ) ) ;
Integer i = 0 ;
try {
Integer.parseInt ( dec[0].strip ( ) ) ;
i = 1 ;
} catch ( Exception ignored ) {
}
for ( ; i < dec.length - 2 ; i++ ) {
if ( !is_static ) is_static = dec[i].equals ( "static" ) ;
if ( protection_strings.contains ( dec[i] ) && !dec[i].isBlank ( ) ) {
protection_level = ProtectionLevel.valueOf ( dec[i].toUpperCase ( ) ) ;
}
}
if ( protection_level == null ) protection_level = ProtectionLevel.PACKAGE_PRIVATE ;
Arrays.stream ( args )
.filter ( arg -> !arg.isBlank ( ) )
.forEach ( arg -> this.args.add ( new Variable ( arg ) ) ) ;
}
}
